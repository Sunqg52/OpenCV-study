data：Mat对象中的一个指针，指向内存中存放矩阵数据的一块内存 (uchar* data)
dims：Mat所代表的矩阵的维度，如 3 * 4 的矩阵为 2 维， 3 * 4 * 5 的为3维
channels：通道，矩阵中的每一个矩阵元素拥有的值的个数，比如说 3 * 4 矩阵中一共 12 个元素，如果每个元素有三个值，那么就说这个矩阵是 3 通道的，即 channels = 3。常见的是一张彩色图片有红、绿、蓝三个通道。
depth：深度，即每一个像素的位数(bits)，在opencv的Mat.depth()中得到的是一个 0 – 6 的数字，分别代表不同的位数：enum { CV_8U=0, CV_8S=1, CV_16U=2, CV_16S=3, CV_32S=4, CV_32F=5, CV_64F=6 }; 可见 0和1都代表8位， 2和3都代表16位，4和5代表32位，6代表64位；
step：是一个数组，定义了矩阵的布局，具体见下面图片分析，另外注意 step1 (step / elemSize1)，M.step[m-1] 总是等于 elemSize，M.step1(m-1)总是等于 channels；
elemSize : 矩阵中每一个元素的数据大小，如果Mat中的数据的数据类型是 CV_8U 那么 elemSize = 1，CV_8UC3 那么 elemSize = 3，CV_16UC2 那么 elemSize = 4；记住另外有个 elemSize1 表示的是矩阵中数据类型的大小，即 elemSize / channels 的大小




图像数据结构实例：
//图像数据结构实例
#include"opencv2/core/core.hpp"
#include<iostream>

using namespace cv;
using namespace std;


int main(int, char**)
{
	//用构造函数建立数据  2*2的矩阵  里面的元素为8位  U表示（unsigned）为无符号数  C表示（channe）通道数有3个
	Mat M(2,2,CV_8UC3,Scalar(0, 0, 255));
	cout << "M = " << endl << " " << M << endl;


	//用create函数建立数据
	M.create(2, 2, CV_8UC(2));
	cout << "M = " << endl << " " << M << endl;



	//建立多维矩阵   无法用<<输出
	int sz[3] = { 2, 2, 2 };
	Mat L(3, sz, CV_8UC(1), Scalar::all(0));



	//用MATLAB风格的眼建立数据
	Mat E = Mat::eye(3, 3, CV_64F);
	cout << "E = " << endl << " " << E << endl;


	//数据都是1
	Mat O = Mat::ones(2, 2, CV_32F);
	cout << "O = " << endl << " " << O << endl;


	//数据都是0
	Mat Z= Mat::zeros(2, 2, CV_8UC1);
	cout << "Z = " << endl << " " << Z << endl;


	//建立3*3双精度矩阵，值由<<输入
	Mat C = (Mat_<double>(3, 3) << 0, -1, 0, -1, 5, -1, 0, -1, 0);
	cout << "C = " << endl << " " << C << endl;


	//复制第一行数据
	Mat RowClone = C.row(0).clone();
	cout << "RowClone = " << endl << " " << RowClone << endl;


	//以随机数值填入矩阵内
	Mat R = Mat(3, 2, CV_8UC3);
	randu(R, Scalar::all(0),Scalar::all(255));

	//展示各种输出格式选项
	cout << "R (default) = " << endl << R << endl;
	cout << "R (python)  = " << endl << format(R, "python") << endl;
	cout << "R (numpy)   = " << endl << format(R, "numpy") << endl;
	cout << "R(csv)      = " << endl << format(R, "csv") << endl;
	cout << "R(C)        = " << endl << format(R, "C") << endl;

	//图像中二维的点
	Point2f P(5,1);
	cout << "Point (2D)" << P << endl;
	
	//图像中三维的点
	Point2f P3f(5,1);
	cout << "Point(3D)" << P3f << endl;

	vector<float> v;
	v.push_back((float) CV_PI);
	v.push_back(2);
	v.push_back(3.01f);

	cout << "浮点向量矩阵 = " << Mat(v) << endl << endl;
	
	vector<Point2f> vPoints(5);
	for (size_t i = 0; i < vPoints.size(); ++i)
		vPoints[i] = Point2f((float)(i * 5), (float)(i % 7));
	cout << "二维图点向量 = " << vPoints << endl;

	getchar();
	return 0;
}

